{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arduino UNO The UNO Editor Docs go over many of the syntax and specifics of the Arduino language and the UNO Editor . For more information, visit the Arduino Reference Page . The Arduino is a microcontroller board that can be programmed to control electrical devices such as lights and motors. They're often used to make quadcopters, thermostats, 3D printers, and more. The Arduino language is based on C/C++, but also has many of its own special functions and constants. The main structure of an Arduino program, called a sketch, includes a setup function and a continuous loop function. The setup runs once, and the loop runs continuously after that for as long as the Arduino is powered. It looks like this: //The setup runs once when the Arduino is powered/turned on void setup() { //Your setup code goes in here } //The loop runs continuously, starting after the setup is finished running. void loop() { //The rest of your code goes in here } The Arduino can be programmed using the Arduino IDE when using PCs, Macs, or Linux computers. When using a Chromebook, the Arduino can be programmed using the UNO editor on the OYOclass platform. UNO Editor The UNO editor is a development environment that can compile and upload your code to an Arduino UNO. The editor works on Chromebooks, PCs, Macs, and Linux computers, allowing you to use devices you might not always be able to use with the standard Arduino IDE. Another benefit of the UNO editor, it's lightning fast! The libraries are pre-compiled, so only the code you type has to be compiled. User Interface File The File button is where you will find the new file, open, save, rename, and download options. This is also where you can manage and delete your files, and view your saving histories (older versions). Note that when saving or renaming a file, you must keep the .ino file extension. Verify The Verify button checks your code for syntax errors and compiles it. Compilation is the process of translating one language to another. In this case, the Arduino code is translated into the machine code that the Arduino understands. If your code has never been saved, the Verify button will prompt you to save for the first time. After your code has been saved once, the Verify button will save your work each time it's clicked. Upload to board The Upload to board button will compile your code, then upload, or flash, your code to the board. When you access the UNO Editor from the Apps dropdown, clicking this button will prompt you to open the app in a new tab. This is necessary to allow you to upload code from the Editor to your board. Compiling Status The compiling status is shown in the window in the lower left hand corner of the editor. This window will inform you of the compiling status and let you know when your code has been uploaded to the board. If there are any syntax errors in your code, the error reports will appear here. Serial Monitor The serial monitor is shown in the window in the lower right hand corner of the editor. It allows you to send and receive messages to and from your Arduino board. The serial monitor is set to auto scroll by default, but it can be turned off. The serial monitor can also be cleared by using the clear button. The serial monitor in the UNO editor MUST be used with a delay of 100ms or more in the loop() when repeatedly printing to the serial monitor. This may be accomplished by other processes being computed in the code, or by use of a delay() function. If there is no delay, the editor can enter a continuous loop, unable to process any other commands. This can crash your browser and force you to restart. Credit https://www.arduino.cc/reference/en/","title":"Home"},{"location":"#arduino-uno","text":"The UNO Editor Docs go over many of the syntax and specifics of the Arduino language and the UNO Editor . For more information, visit the Arduino Reference Page . The Arduino is a microcontroller board that can be programmed to control electrical devices such as lights and motors. They're often used to make quadcopters, thermostats, 3D printers, and more. The Arduino language is based on C/C++, but also has many of its own special functions and constants. The main structure of an Arduino program, called a sketch, includes a setup function and a continuous loop function. The setup runs once, and the loop runs continuously after that for as long as the Arduino is powered. It looks like this: //The setup runs once when the Arduino is powered/turned on void setup() { //Your setup code goes in here } //The loop runs continuously, starting after the setup is finished running. void loop() { //The rest of your code goes in here } The Arduino can be programmed using the Arduino IDE when using PCs, Macs, or Linux computers. When using a Chromebook, the Arduino can be programmed using the UNO editor on the OYOclass platform.","title":"Arduino UNO"},{"location":"#uno-editor","text":"The UNO editor is a development environment that can compile and upload your code to an Arduino UNO. The editor works on Chromebooks, PCs, Macs, and Linux computers, allowing you to use devices you might not always be able to use with the standard Arduino IDE. Another benefit of the UNO editor, it's lightning fast! The libraries are pre-compiled, so only the code you type has to be compiled.","title":"UNO Editor"},{"location":"#user-interface","text":"","title":"User Interface"},{"location":"#file","text":"The File button is where you will find the new file, open, save, rename, and download options. This is also where you can manage and delete your files, and view your saving histories (older versions). Note that when saving or renaming a file, you must keep the .ino file extension.","title":"File"},{"location":"#verify","text":"The Verify button checks your code for syntax errors and compiles it. Compilation is the process of translating one language to another. In this case, the Arduino code is translated into the machine code that the Arduino understands. If your code has never been saved, the Verify button will prompt you to save for the first time. After your code has been saved once, the Verify button will save your work each time it's clicked.","title":"Verify"},{"location":"#upload-to-board","text":"The Upload to board button will compile your code, then upload, or flash, your code to the board. When you access the UNO Editor from the Apps dropdown, clicking this button will prompt you to open the app in a new tab. This is necessary to allow you to upload code from the Editor to your board.","title":"Upload to board"},{"location":"#compiling-status","text":"The compiling status is shown in the window in the lower left hand corner of the editor. This window will inform you of the compiling status and let you know when your code has been uploaded to the board. If there are any syntax errors in your code, the error reports will appear here.","title":"Compiling Status"},{"location":"#serial-monitor","text":"The serial monitor is shown in the window in the lower right hand corner of the editor. It allows you to send and receive messages to and from your Arduino board. The serial monitor is set to auto scroll by default, but it can be turned off. The serial monitor can also be cleared by using the clear button. The serial monitor in the UNO editor MUST be used with a delay of 100ms or more in the loop() when repeatedly printing to the serial monitor. This may be accomplished by other processes being computed in the code, or by use of a delay() function. If there is no delay, the editor can enter a continuous loop, unable to process any other commands. This can crash your browser and force you to restart.","title":"Serial Monitor"},{"location":"#credit","text":"https://www.arduino.cc/reference/en/","title":"Credit"},{"location":"Builtin/builtin/","text":"Core Functions The Arduino language is based on C/C++, but it also comes with many of its own builtin functions. Below are some of the core builtin functions. pinMode() Description Sets up a pin to be either an input or output. This allows the Arduino to allocate current appropriately Syntax pinMode(pin, mode); pin: the number of the pin being used mode: INPUT or OUTPUT Examples pinMode(13, OUTPUT); pinMode(10, INPUT); digitalWrite() Description Sets a pin to be either HIGH, 5V, or LOW, 0V or ground. The pin should be set to be an output using pinMode(). Syntax digitalWrite(pin, value); pin: the number of the pin being used value: HIGH or LOW (5V or GND) Examples digitalWrite(13, HIGH); digitalWrite(13, LOW); digitalRead() Description Reads and returns the value of a pin; either HIGH or LOW. The value of a pin is determined by it's voltage with 0-3V being LOW and 3-5V being HIGH. Syntax digitalRead(pin); pin: the number of the pin being used Example val = digitalRead(2); //read the value on pin 2 and save the result in 'val' analogWrite() Description Uses PWM to set a pin to a voltage between 0V and 5V. PWM, pusle width modulation, turns the pin on and off quickly, simulating an in between value. The pin should be set to be an output using pinMode(). Syntax analogWrite(pin, value); pin: the number of the pin being used value: 0-255 (0V-5V) Example analogWrite(6, 186); //send a PWM signal through pin 6. analogRead() Description Reads and returns the value of an analog pin on a range of 0-1023. The value of the pin changes with voltage with 0V being returned as 0 and 5V being returned as 1023. Analog pins are pins A0-A5 Syntax analogRead(pin); pin: the number of the pin being used Example val = analogRead(A0); //read the value on pin A0 and save the result in 'val.' delay() Description Wait a speicified number of milliseconds. The Arduino does not run any other code while it is busy delaying. Syntax delay(milliseconds); milliseconds: the number of milliseconds you wish to delay. There are 1,000 milliseconds in a second. Example digitalWrite(13,HIGH); delay(1000); digitalWrite(13,LOW); delay(1000);","title":"Core Functions"},{"location":"Builtin/builtin/#core-functions","text":"The Arduino language is based on C/C++, but it also comes with many of its own builtin functions. Below are some of the core builtin functions.","title":"Core Functions"},{"location":"Builtin/builtin/#pinmode","text":"","title":"pinMode()"},{"location":"Builtin/builtin/#description","text":"Sets up a pin to be either an input or output. This allows the Arduino to allocate current appropriately","title":"Description"},{"location":"Builtin/builtin/#syntax","text":"pinMode(pin, mode); pin: the number of the pin being used mode: INPUT or OUTPUT","title":"Syntax"},{"location":"Builtin/builtin/#examples","text":"pinMode(13, OUTPUT); pinMode(10, INPUT);","title":"Examples"},{"location":"Builtin/builtin/#digitalwrite","text":"","title":"digitalWrite()"},{"location":"Builtin/builtin/#description_1","text":"Sets a pin to be either HIGH, 5V, or LOW, 0V or ground. The pin should be set to be an output using pinMode().","title":"Description"},{"location":"Builtin/builtin/#syntax_1","text":"digitalWrite(pin, value); pin: the number of the pin being used value: HIGH or LOW (5V or GND)","title":"Syntax"},{"location":"Builtin/builtin/#examples_1","text":"digitalWrite(13, HIGH); digitalWrite(13, LOW);","title":"Examples"},{"location":"Builtin/builtin/#digitalread","text":"","title":"digitalRead()"},{"location":"Builtin/builtin/#description_2","text":"Reads and returns the value of a pin; either HIGH or LOW. The value of a pin is determined by it's voltage with 0-3V being LOW and 3-5V being HIGH.","title":"Description"},{"location":"Builtin/builtin/#syntax_2","text":"digitalRead(pin); pin: the number of the pin being used","title":"Syntax"},{"location":"Builtin/builtin/#example","text":"val = digitalRead(2); //read the value on pin 2 and save the result in 'val'","title":"Example"},{"location":"Builtin/builtin/#analogwrite","text":"","title":"analogWrite()"},{"location":"Builtin/builtin/#description_3","text":"Uses PWM to set a pin to a voltage between 0V and 5V. PWM, pusle width modulation, turns the pin on and off quickly, simulating an in between value. The pin should be set to be an output using pinMode().","title":"Description"},{"location":"Builtin/builtin/#syntax_3","text":"analogWrite(pin, value); pin: the number of the pin being used value: 0-255 (0V-5V)","title":"Syntax"},{"location":"Builtin/builtin/#example_1","text":"analogWrite(6, 186); //send a PWM signal through pin 6.","title":"Example"},{"location":"Builtin/builtin/#analogread","text":"","title":"analogRead()"},{"location":"Builtin/builtin/#description_4","text":"Reads and returns the value of an analog pin on a range of 0-1023. The value of the pin changes with voltage with 0V being returned as 0 and 5V being returned as 1023. Analog pins are pins A0-A5","title":"Description"},{"location":"Builtin/builtin/#syntax_4","text":"analogRead(pin); pin: the number of the pin being used","title":"Syntax"},{"location":"Builtin/builtin/#example_2","text":"val = analogRead(A0); //read the value on pin A0 and save the result in 'val.'","title":"Example"},{"location":"Builtin/builtin/#delay","text":"","title":"delay()"},{"location":"Builtin/builtin/#description_5","text":"Wait a speicified number of milliseconds. The Arduino does not run any other code while it is busy delaying.","title":"Description"},{"location":"Builtin/builtin/#syntax_5","text":"delay(milliseconds); milliseconds: the number of milliseconds you wish to delay. There are 1,000 milliseconds in a second.","title":"Syntax"},{"location":"Builtin/builtin/#example_3","text":"digitalWrite(13,HIGH); delay(1000); digitalWrite(13,LOW); delay(1000);","title":"Example"},{"location":"Data_Types/data_types/","text":"Data Types Data can be stored in variables. Each variable has a particular type of data it can store, called a data type. Example of data types can be numbers, characters, strings of text, etc. Here is an example of each of the data types reviewed on this page. Continue down for more details. int var1 = 5; long millisecondsInADay = 86400000; float var1 = 3.14159; bool isOn = true; char var1 = 'A'; int myIntArray[] = {9, 8, 7, 6}; int Description Int stands for integer. An integer is any whole number, both positive and negative. Size 2 bytes Range -32,768 to 32,767 Examples int var1 = 5; int var2 = -3; int var3 = 0; int var4; //undefined long Description Any whole number, both positive and negative.A long data type is like an int data type, but takes up twice the data, allowing the storage of larger numbers. Size 4 bytes Range -2,147,483,648 to 2,147,483,647 Examples long millisecondsInADay = 86400000; //86,400,000 milliseconds in a day long var1 = -1500000000; //-1,500,000,000 long var2; //undefined float Description Float stands for a floating-point number. It is a data type that can store numbers with decimals, 1.5, for example. When doing math with variables of a float data type, you will want to use numbers that are also floats in order to keep the values after the decimal. For example, use 1.0 instead of 1, as 1 is not a float. Floats only have 6-7 digits of precision. Additionally, floating point calculations take longer to compute. Size 4 bytes Range -3.4028235E+38 to 3.4028235E+38 Examples float var1 = 3.14159; float var2 = -5.4; float var3 = 0.0; float var4; //undefined bool Description A bool, or boolean, is a data type that stores either true or false . Size 1 byte Range true or false String Description A String data type contains a string of text. The text can have letters, numbers, and special characters. The contents of a String goes within double quotes. Examples bool isOn = true; bool lightsOn = false; int bool; //undefined char Description Char stands for character. A char data type contains a single character, including letters, numbers, and special characters. The character stored in a char gets written between single quotes. The characters are actually stored as numbers in memory. These numbers get translated to the characters we recognize according to the ASCII chart. Size 1 byte Examples char var1 = 'A'; char var2 = 'b'; char var3 = '#'; array Description An array is a collection of several variables, organized under one variable name. Each variable within the array is given an index number,its order within the array. All of the values stored within the array must be of the same type. An item within an array can be retrieved by calling the array name with the index number, starting at 0 for the first item in the array. An example is shown below. int myArray[] = {9, 8, 7, 6}; return myArray[2]; //Returns 7, the third item in myArray Arrays can be initialized with values, or can be declared as being empty with a specified length. Examples int myIntArray[] = {9, 8, 7, 6}; //An int array with 4 indices float myFloatArray[] = {9.8, 5.7, 7.6, 8.9}; //A float array with 4 indices char myCharArray[] = {'a', 'b', 'c'}; //A char array with 3 indices int myArray[6]; //An empty array with 6 indices","title":"Data Types"},{"location":"Data_Types/data_types/#data-types","text":"Data can be stored in variables. Each variable has a particular type of data it can store, called a data type. Example of data types can be numbers, characters, strings of text, etc. Here is an example of each of the data types reviewed on this page. Continue down for more details. int var1 = 5; long millisecondsInADay = 86400000; float var1 = 3.14159; bool isOn = true; char var1 = 'A'; int myIntArray[] = {9, 8, 7, 6};","title":"Data Types"},{"location":"Data_Types/data_types/#int","text":"","title":"int"},{"location":"Data_Types/data_types/#description","text":"Int stands for integer. An integer is any whole number, both positive and negative.","title":"Description"},{"location":"Data_Types/data_types/#size","text":"2 bytes","title":"Size"},{"location":"Data_Types/data_types/#range","text":"-32,768 to 32,767","title":"Range"},{"location":"Data_Types/data_types/#examples","text":"int var1 = 5; int var2 = -3; int var3 = 0; int var4; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#long","text":"","title":"long"},{"location":"Data_Types/data_types/#description_1","text":"Any whole number, both positive and negative.A long data type is like an int data type, but takes up twice the data, allowing the storage of larger numbers.","title":"Description"},{"location":"Data_Types/data_types/#size_1","text":"4 bytes","title":"Size"},{"location":"Data_Types/data_types/#range_1","text":"-2,147,483,648 to 2,147,483,647","title":"Range"},{"location":"Data_Types/data_types/#examples_1","text":"long millisecondsInADay = 86400000; //86,400,000 milliseconds in a day long var1 = -1500000000; //-1,500,000,000 long var2; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#float","text":"","title":"float"},{"location":"Data_Types/data_types/#description_2","text":"Float stands for a floating-point number. It is a data type that can store numbers with decimals, 1.5, for example. When doing math with variables of a float data type, you will want to use numbers that are also floats in order to keep the values after the decimal. For example, use 1.0 instead of 1, as 1 is not a float. Floats only have 6-7 digits of precision. Additionally, floating point calculations take longer to compute.","title":"Description"},{"location":"Data_Types/data_types/#size_2","text":"4 bytes","title":"Size"},{"location":"Data_Types/data_types/#range_2","text":"-3.4028235E+38 to 3.4028235E+38","title":"Range"},{"location":"Data_Types/data_types/#examples_2","text":"float var1 = 3.14159; float var2 = -5.4; float var3 = 0.0; float var4; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#bool","text":"","title":"bool"},{"location":"Data_Types/data_types/#description_3","text":"A bool, or boolean, is a data type that stores either true or false .","title":"Description"},{"location":"Data_Types/data_types/#size_3","text":"1 byte","title":"Size"},{"location":"Data_Types/data_types/#range_3","text":"true or false","title":"Range"},{"location":"Data_Types/data_types/#string","text":"","title":"String"},{"location":"Data_Types/data_types/#description_4","text":"A String data type contains a string of text. The text can have letters, numbers, and special characters. The contents of a String goes within double quotes.","title":"Description"},{"location":"Data_Types/data_types/#examples_3","text":"bool isOn = true; bool lightsOn = false; int bool; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#char","text":"","title":"char"},{"location":"Data_Types/data_types/#description_5","text":"Char stands for character. A char data type contains a single character, including letters, numbers, and special characters. The character stored in a char gets written between single quotes. The characters are actually stored as numbers in memory. These numbers get translated to the characters we recognize according to the ASCII chart.","title":"Description"},{"location":"Data_Types/data_types/#size_4","text":"1 byte","title":"Size"},{"location":"Data_Types/data_types/#examples_4","text":"char var1 = 'A'; char var2 = 'b'; char var3 = '#';","title":"Examples"},{"location":"Data_Types/data_types/#array","text":"","title":"array"},{"location":"Data_Types/data_types/#description_6","text":"An array is a collection of several variables, organized under one variable name. Each variable within the array is given an index number,its order within the array. All of the values stored within the array must be of the same type. An item within an array can be retrieved by calling the array name with the index number, starting at 0 for the first item in the array. An example is shown below. int myArray[] = {9, 8, 7, 6}; return myArray[2]; //Returns 7, the third item in myArray Arrays can be initialized with values, or can be declared as being empty with a specified length.","title":"Description"},{"location":"Data_Types/data_types/#examples_5","text":"int myIntArray[] = {9, 8, 7, 6}; //An int array with 4 indices float myFloatArray[] = {9.8, 5.7, 7.6, 8.9}; //A float array with 4 indices char myCharArray[] = {'a', 'b', 'c'}; //A char array with 3 indices int myArray[6]; //An empty array with 6 indices","title":"Examples"},{"location":"Interrupts/interrupts/","text":"External Interrupts An external interrupt - sometimes called a hardware interrupt - is a piece of hardware that, when triggered, runs an interrupt service routine, ISR. An interrupt service routine is simply a user defined function that gets attached to an interrupt. When the interrupt is triggered, it stops the code the Arduino is running and runs the ISR. Once the ISR is finished running, the Arduino returns to running the code where it left off. A simple example is a button connected to an interrupt that switches the direction of a motor any time it's pushed, regardless of where the Arduino is in the code. The Arduino has two interrupts, 0 and 1, connected to pins 2 and 3, respectively. The can ge triggered by four different modes: Low : trigger the interrupt whenever the pin is low, 0V-3V. Falling : trigger the interrupt whenever the pin goes from high to low. Rising : trigger the interrupt whenever the pin goes from low to high. Change : trigger the interrupt whenever the pin changes from low to high, or vice versa. attachInterrupt() Description To set up an interrupt, you need to create an ISR, attach it to an interrupt pin, and choose the mode. You do this using the method attachInterrupt() . attachInterrupt() is typically used within the setup() . Note that you should use pinMode() to set up your interrupt pin as an input as well. Syntax attachInterrupt(digitalPinToInterrupt(pin), ISR, mode); pin : the number of the pin being used ISR : the name of the interrupt service routine your create at the bottom of your code mode : LOW, FALLING, RISING, or CHANGE digitalPinToInterrupt() : a function that takes in a pin number and returns the respective interrupt number (different versions of the Arduino have different interrupt pins). Examples int led = 13; int button = 2; int on = LOW; void setup() { pinMode(led, OUTPUT); pinMode(button, INPUT); attachInterrupt(digitalPinToInterrupt(button), ledChange, CHANGE); } void loop() { digitalWrite(ledPin, on); } void ledChange() { //ledChange is the name of the ISR on = !on; //Change the value of 'on' between LOW and HIGH }","title":"Interrupts"},{"location":"Interrupts/interrupts/#external-interrupts","text":"An external interrupt - sometimes called a hardware interrupt - is a piece of hardware that, when triggered, runs an interrupt service routine, ISR. An interrupt service routine is simply a user defined function that gets attached to an interrupt. When the interrupt is triggered, it stops the code the Arduino is running and runs the ISR. Once the ISR is finished running, the Arduino returns to running the code where it left off. A simple example is a button connected to an interrupt that switches the direction of a motor any time it's pushed, regardless of where the Arduino is in the code. The Arduino has two interrupts, 0 and 1, connected to pins 2 and 3, respectively. The can ge triggered by four different modes: Low : trigger the interrupt whenever the pin is low, 0V-3V. Falling : trigger the interrupt whenever the pin goes from high to low. Rising : trigger the interrupt whenever the pin goes from low to high. Change : trigger the interrupt whenever the pin changes from low to high, or vice versa.","title":"External Interrupts"},{"location":"Interrupts/interrupts/#attachinterrupt","text":"","title":"attachInterrupt()"},{"location":"Interrupts/interrupts/#description","text":"To set up an interrupt, you need to create an ISR, attach it to an interrupt pin, and choose the mode. You do this using the method attachInterrupt() . attachInterrupt() is typically used within the setup() . Note that you should use pinMode() to set up your interrupt pin as an input as well.","title":"Description"},{"location":"Interrupts/interrupts/#syntax","text":"attachInterrupt(digitalPinToInterrupt(pin), ISR, mode); pin : the number of the pin being used ISR : the name of the interrupt service routine your create at the bottom of your code mode : LOW, FALLING, RISING, or CHANGE digitalPinToInterrupt() : a function that takes in a pin number and returns the respective interrupt number (different versions of the Arduino have different interrupt pins).","title":"Syntax"},{"location":"Interrupts/interrupts/#examples","text":"int led = 13; int button = 2; int on = LOW; void setup() { pinMode(led, OUTPUT); pinMode(button, INPUT); attachInterrupt(digitalPinToInterrupt(button), ledChange, CHANGE); } void loop() { digitalWrite(ledPin, on); } void ledChange() { //ledChange is the name of the ISR on = !on; //Change the value of 'on' between LOW and HIGH }","title":"Examples"},{"location":"Libraries/dht/","text":"DHT Sensor The DHT line of sensors are temperature and humidity sensors. The kidOYO prototyping kits features a DHT11 sensor. To include the library into the sketch you're working on, include the library shown below at the top of your sketch. #include DHT.h Object To create an LCD object, follow the line of code below. DHT dht(DHTPIN, DHTTYPE); DHTPIN : the Arduino pin the DHT sensor is connected to DHTTYPE : DHT type (the kit uses the DHT11) The first argument is the address of your LCD screen. This can be found by using the scanner script at the bottom of this page. Methods dht.begin(); Start and initialize the dht object dht.readHumidity() Read and return the relative humidity as a percentage dht.readTemperature() Read and return temperature in degrees Celcius dht.readTemperature(true) Read and return temperature in degrees Fahrenheit. The argument 'true' changes the output from Celcius to Fahrenheit. dht.computeHeatIndex(f, h) Compute and return the heat index in degrees Fahrenheit. The heat index is the measure of how hot it feels based on the temperature and humidity. dht.computeHeatIndex(t, h, false) Compute and return the heat index in degrees Celcius. The heat index is the measure of how hot it feels based on the temperature and humidity. The last argument, 'false,' changes the output to Celcius. // Example testing sketch for various DHT humidity/temperature sensors // Written by ladyada, public domain #include DHT.h #define DHTPIN 2 // what digital pin we're connected to // Uncomment whatever type you're using! #define DHTTYPE DHT11 // DHT 11 //#define DHTTYPE DHT22 // DHT 22 (AM2302), AM2321 //#define DHTTYPE DHT21 // DHT 21 (AM2301) // Connect pin 1 (on the left) of the sensor to +5V // NOTE, if using a board with 3.3V logic like an Arduino Due connect pin 1 // to 3.3V instead of 5V! // Connect pin 2 of the sensor to whatever your DHTPIN is // Connect pin 4 (on the right) of the sensor to GROUND // Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor // Initialize DHT sensor. // Note that older versions of this library took an optional third parameter to // tweak the timings for faster processors. This parameter is no longer needed // as the current DHT reading algorithm adjusts itself to work on faster procs. DHT dht(DHTPIN, DHTTYPE); void setup() { Serial.begin(9600); Serial.println( DHTxx test! ); dht.begin(); } void loop() { // Wait a few seconds between measurements. delay(2000); // Reading temperature or humidity takes about 250 milliseconds! // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor) float h = dht.readHumidity(); // Read temperature as Celsius (the default) float t = dht.readTemperature(); // Read temperature as Fahrenheit (isFahrenheit = true) float f = dht.readTemperature(true); // Check if any reads failed and exit early (to try again). if (isnan(h) || isnan(t) || isnan(f)) { Serial.println( Failed to read from DHT sensor! ); return; } // Compute heat index in Fahrenheit (the default) float hif = dht.computeHeatIndex(f, h); // Compute heat index in Celsius (isFahreheit = false) float hic = dht.computeHeatIndex(t, h, false); Serial.print( Humidity: ); Serial.print(h); Serial.print( %\\t ); Serial.print( Temperature: ); Serial.print(t); Serial.print( *C ); Serial.print(f); Serial.print( *F\\t ); Serial.print( Heat index: ); Serial.print(hic); Serial.print( *C ); Serial.print(hif); Serial.println( *F ); } Credit Library by Adafruit/Lady Ada","title":"DHT"},{"location":"Libraries/dht/#dht-sensor","text":"The DHT line of sensors are temperature and humidity sensors. The kidOYO prototyping kits features a DHT11 sensor. To include the library into the sketch you're working on, include the library shown below at the top of your sketch. #include DHT.h","title":"DHT Sensor"},{"location":"Libraries/dht/#object","text":"To create an LCD object, follow the line of code below. DHT dht(DHTPIN, DHTTYPE); DHTPIN : the Arduino pin the DHT sensor is connected to DHTTYPE : DHT type (the kit uses the DHT11) The first argument is the address of your LCD screen. This can be found by using the scanner script at the bottom of this page.","title":"Object"},{"location":"Libraries/dht/#methods","text":"","title":"Methods"},{"location":"Libraries/dht/#dhtbegin","text":"Start and initialize the dht object","title":"dht.begin();"},{"location":"Libraries/dht/#dhtreadhumidity","text":"Read and return the relative humidity as a percentage","title":"dht.readHumidity()"},{"location":"Libraries/dht/#dhtreadtemperature","text":"Read and return temperature in degrees Celcius","title":"dht.readTemperature()"},{"location":"Libraries/dht/#dhtreadtemperaturetrue","text":"Read and return temperature in degrees Fahrenheit. The argument 'true' changes the output from Celcius to Fahrenheit.","title":"dht.readTemperature(true)"},{"location":"Libraries/dht/#dhtcomputeheatindexf-h","text":"Compute and return the heat index in degrees Fahrenheit. The heat index is the measure of how hot it feels based on the temperature and humidity.","title":"dht.computeHeatIndex(f, h)"},{"location":"Libraries/dht/#dhtcomputeheatindext-h-false","text":"Compute and return the heat index in degrees Celcius. The heat index is the measure of how hot it feels based on the temperature and humidity. The last argument, 'false,' changes the output to Celcius. // Example testing sketch for various DHT humidity/temperature sensors // Written by ladyada, public domain #include DHT.h #define DHTPIN 2 // what digital pin we're connected to // Uncomment whatever type you're using! #define DHTTYPE DHT11 // DHT 11 //#define DHTTYPE DHT22 // DHT 22 (AM2302), AM2321 //#define DHTTYPE DHT21 // DHT 21 (AM2301) // Connect pin 1 (on the left) of the sensor to +5V // NOTE, if using a board with 3.3V logic like an Arduino Due connect pin 1 // to 3.3V instead of 5V! // Connect pin 2 of the sensor to whatever your DHTPIN is // Connect pin 4 (on the right) of the sensor to GROUND // Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor // Initialize DHT sensor. // Note that older versions of this library took an optional third parameter to // tweak the timings for faster processors. This parameter is no longer needed // as the current DHT reading algorithm adjusts itself to work on faster procs. DHT dht(DHTPIN, DHTTYPE); void setup() { Serial.begin(9600); Serial.println( DHTxx test! ); dht.begin(); } void loop() { // Wait a few seconds between measurements. delay(2000); // Reading temperature or humidity takes about 250 milliseconds! // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor) float h = dht.readHumidity(); // Read temperature as Celsius (the default) float t = dht.readTemperature(); // Read temperature as Fahrenheit (isFahrenheit = true) float f = dht.readTemperature(true); // Check if any reads failed and exit early (to try again). if (isnan(h) || isnan(t) || isnan(f)) { Serial.println( Failed to read from DHT sensor! ); return; } // Compute heat index in Fahrenheit (the default) float hif = dht.computeHeatIndex(f, h); // Compute heat index in Celsius (isFahreheit = false) float hic = dht.computeHeatIndex(t, h, false); Serial.print( Humidity: ); Serial.print(h); Serial.print( %\\t ); Serial.print( Temperature: ); Serial.print(t); Serial.print( *C ); Serial.print(f); Serial.print( *F\\t ); Serial.print( Heat index: ); Serial.print(hic); Serial.print( *C ); Serial.print(hif); Serial.println( *F ); }","title":"dht.computeHeatIndex(t, h, false)"},{"location":"Libraries/dht/#credit","text":"Library by Adafruit/Lady Ada","title":"Credit"},{"location":"Libraries/keypad/","text":"Keypad The keypad library makes using button matrix keypads easy to use with the Arduino. To properly read from a keypad, you have to scan through the rows and columns of the button matrix setting some as high or low outputs, and reading from others. To do so while trying to also detect other sensors and events is difficult. The keypad library does these processes for you, allowing you to read which key is pressed with a simple method, getKey(). To use the keypad library, you first need to include it at the top of your code. #include Keypad.h 2D Array Now it's best to store the keys of the keypad in a 2D array. This will change depending on how your keypad is labled and how many keys it has. For example, your keypad may be a 4x4 or a 3x4 matrix. The example below is of a 4x4 keypad. int numRows = 4; int numCols = 4; char keys[numRows][numCols] = { {'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'} }; Pinouts You also need to map the pinouts. To do this, we'll use two array, one for the rows and one for the columns. byte rowPins[] = {9, 8, 7, 6}; byte colPins[] = {5, 4, 3, 2}; Object To create an LCD object, follow the line of code below. Keypad keypadObj = Keypad(makeKeymap(keys), rowPins, colPins, rows, cols); Methods keypadObj.getKey() The .getKey() method returns the key pressed based on the 2D array you set up. This method returns a char. See below for an example of how to use the method. char key = keypadObj.getKey(); keypadObj.waitForKey() The .waitForKey() method waits until a key is pressed, and prevents all other code from running. The only exception is interrupt service routines, which will run when triggered, regarless of the .waitForKey() method. Credit Library by Mark Stanley, Alexander Brevig","title":"Keypad"},{"location":"Libraries/keypad/#keypad","text":"The keypad library makes using button matrix keypads easy to use with the Arduino. To properly read from a keypad, you have to scan through the rows and columns of the button matrix setting some as high or low outputs, and reading from others. To do so while trying to also detect other sensors and events is difficult. The keypad library does these processes for you, allowing you to read which key is pressed with a simple method, getKey(). To use the keypad library, you first need to include it at the top of your code. #include Keypad.h","title":"Keypad"},{"location":"Libraries/keypad/#2d-array","text":"Now it's best to store the keys of the keypad in a 2D array. This will change depending on how your keypad is labled and how many keys it has. For example, your keypad may be a 4x4 or a 3x4 matrix. The example below is of a 4x4 keypad. int numRows = 4; int numCols = 4; char keys[numRows][numCols] = { {'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'} };","title":"2D Array"},{"location":"Libraries/keypad/#pinouts","text":"You also need to map the pinouts. To do this, we'll use two array, one for the rows and one for the columns. byte rowPins[] = {9, 8, 7, 6}; byte colPins[] = {5, 4, 3, 2};","title":"Pinouts"},{"location":"Libraries/keypad/#object","text":"To create an LCD object, follow the line of code below. Keypad keypadObj = Keypad(makeKeymap(keys), rowPins, colPins, rows, cols);","title":"Object"},{"location":"Libraries/keypad/#methods","text":"","title":"Methods"},{"location":"Libraries/keypad/#keypadobjgetkey","text":"The .getKey() method returns the key pressed based on the 2D array you set up. This method returns a char. See below for an example of how to use the method. char key = keypadObj.getKey();","title":"keypadObj.getKey()"},{"location":"Libraries/keypad/#keypadobjwaitforkey","text":"The .waitForKey() method waits until a key is pressed, and prevents all other code from running. The only exception is interrupt service routines, which will run when triggered, regarless of the .waitForKey() method.","title":"keypadObj.waitForKey()"},{"location":"Libraries/keypad/#credit","text":"Library by Mark Stanley, Alexander Brevig","title":"Credit"},{"location":"Libraries/liquid_crystal/","text":"Liquid Crystal I2C The LiquidCrystal_I2C library allows you to program an Arduino to print messages to an LCD screen using an I2C backpack. I2C is a communication protocol that allows you to communicate with multiple devices using only a few pins. To include the library into the sketch you're working on, include the two libraries shown below at the top of your sketch. #include LCD.h #include LiquidCrystal_I2C.h Object To create an LCD object, follow the line of code below. LiquidCrystal_I2C lcd(0x3f, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); The first argument is the address of your LCD screen. This can be found by using the scanner script at the bottom of this page. Methods lcd.begin(x,y) x : the number of horizontal characters of the lcd screen y : the number of vertical characters of the lcd screen Initialize the LCD screen with the height and width of the displays lcd.clear() Clear all characters from the LCD screen lcd.print(var) var : any String or number data type Prints characters to the LCD screen starting at the current location of the cursor. This method does not skip to the next line when it reaches the end of the line. lcd.setCursor(x,y) x : the horizontal space number, starting at 0 y : the vertical space number, starting at 0 lcd.home() Places the cursor at the (0,0) point (upper left-hand corner) Examples //Print Starting... on the second line of the LCD screen. #include LCD.h #include LiquidCrystal_I2C.h //Create liquid crystal object called 'lcd' LiquidCrystal_I2C lcd(0x3f, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); void setup() { lcd.begin(16, 2); //Start and initialize the lcd display lcd.clear(); //Clear any text from the screen lcd.setCursor(0,1); lcd.print( Starting... ); //Print 'Starting...' delay(1000); //Give a second to display the message. } void loop() { } Scanner script // -------------------------------------- // i2c_scanner // // Version 1 // This program (or code that looks like it) // can be found in many places. // For example on the Arduino.cc forum. // The original author is not know. // Version 2, Juni 2012, Using Arduino 1.0.1 // Adapted to be as simple as possible by Arduino.cc user Krodal // Version 3, Feb 26 2013 // V3 by louarnold // Version 4, March 3, 2013, Using Arduino 1.0.3 // by Arduino.cc user Krodal. // Changes by louarnold removed. // Scanning addresses changed from 0...127 to 1...119, // according to the i2c scanner by Nick Gammon // http://www.gammon.com.au/forum/?id=10896 // Version 5, March 28, 2013 // As version 4, but address scans now to 127. // A sensor seems to use address 120. // Version 6, November 27, 2015. // Added waiting for the Leonardo serial communication. // // // This sketch tests the standard 7-bit addresses // Devices with higher bit address might not be seen properly. // #include Wire.h void setup() { Wire.begin(); Serial.begin(9600); while (!Serial); // Leonardo: wait for serial monitor Serial.println( \\nI2C Scanner ); } void loop() { byte error, address; int nDevices; Serial.println( Scanning... ); nDevices = 0; for(address = 1; address 127; address++ ) { // The i2c_scanner uses the return value of // the Write.endTransmisstion to see if // a device did acknowledge to the address. Wire.beginTransmission(address); error = Wire.endTransmission(); if (error == 0) { Serial.print( I2C device found at address 0x ); if (address 16) Serial.print( 0 ); Serial.print(address,HEX); Serial.println( ! ); nDevices++; } else if (error==4) { Serial.print( Unknown error at address 0x ); if (address 16) Serial.print( 0 ); Serial.println(address,HEX); } } if (nDevices == 0) Serial.println( No I2C devices found\\n ); else Serial.println( done\\n ); delay(5000); // wait 5 seconds for next scan } Credit Library by Francisco Malpartida","title":"LCD"},{"location":"Libraries/liquid_crystal/#liquid-crystal-i2c","text":"The LiquidCrystal_I2C library allows you to program an Arduino to print messages to an LCD screen using an I2C backpack. I2C is a communication protocol that allows you to communicate with multiple devices using only a few pins. To include the library into the sketch you're working on, include the two libraries shown below at the top of your sketch. #include LCD.h #include LiquidCrystal_I2C.h","title":"Liquid Crystal I2C"},{"location":"Libraries/liquid_crystal/#object","text":"To create an LCD object, follow the line of code below. LiquidCrystal_I2C lcd(0x3f, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); The first argument is the address of your LCD screen. This can be found by using the scanner script at the bottom of this page.","title":"Object"},{"location":"Libraries/liquid_crystal/#methods","text":"","title":"Methods"},{"location":"Libraries/liquid_crystal/#lcdbeginxy","text":"x : the number of horizontal characters of the lcd screen y : the number of vertical characters of the lcd screen Initialize the LCD screen with the height and width of the displays","title":"lcd.begin(x,y)"},{"location":"Libraries/liquid_crystal/#lcdclear","text":"Clear all characters from the LCD screen","title":"lcd.clear()"},{"location":"Libraries/liquid_crystal/#lcdprintvar","text":"var : any String or number data type Prints characters to the LCD screen starting at the current location of the cursor. This method does not skip to the next line when it reaches the end of the line.","title":"lcd.print(var)"},{"location":"Libraries/liquid_crystal/#lcdsetcursorxy","text":"x : the horizontal space number, starting at 0 y : the vertical space number, starting at 0","title":"lcd.setCursor(x,y)"},{"location":"Libraries/liquid_crystal/#lcdhome","text":"Places the cursor at the (0,0) point (upper left-hand corner)","title":"lcd.home()"},{"location":"Libraries/liquid_crystal/#examples","text":"//Print Starting... on the second line of the LCD screen. #include LCD.h #include LiquidCrystal_I2C.h //Create liquid crystal object called 'lcd' LiquidCrystal_I2C lcd(0x3f, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); void setup() { lcd.begin(16, 2); //Start and initialize the lcd display lcd.clear(); //Clear any text from the screen lcd.setCursor(0,1); lcd.print( Starting... ); //Print 'Starting...' delay(1000); //Give a second to display the message. } void loop() { }","title":"Examples"},{"location":"Libraries/liquid_crystal/#scanner-script","text":"// -------------------------------------- // i2c_scanner // // Version 1 // This program (or code that looks like it) // can be found in many places. // For example on the Arduino.cc forum. // The original author is not know. // Version 2, Juni 2012, Using Arduino 1.0.1 // Adapted to be as simple as possible by Arduino.cc user Krodal // Version 3, Feb 26 2013 // V3 by louarnold // Version 4, March 3, 2013, Using Arduino 1.0.3 // by Arduino.cc user Krodal. // Changes by louarnold removed. // Scanning addresses changed from 0...127 to 1...119, // according to the i2c scanner by Nick Gammon // http://www.gammon.com.au/forum/?id=10896 // Version 5, March 28, 2013 // As version 4, but address scans now to 127. // A sensor seems to use address 120. // Version 6, November 27, 2015. // Added waiting for the Leonardo serial communication. // // // This sketch tests the standard 7-bit addresses // Devices with higher bit address might not be seen properly. // #include Wire.h void setup() { Wire.begin(); Serial.begin(9600); while (!Serial); // Leonardo: wait for serial monitor Serial.println( \\nI2C Scanner ); } void loop() { byte error, address; int nDevices; Serial.println( Scanning... ); nDevices = 0; for(address = 1; address 127; address++ ) { // The i2c_scanner uses the return value of // the Write.endTransmisstion to see if // a device did acknowledge to the address. Wire.beginTransmission(address); error = Wire.endTransmission(); if (error == 0) { Serial.print( I2C device found at address 0x ); if (address 16) Serial.print( 0 ); Serial.print(address,HEX); Serial.println( ! ); nDevices++; } else if (error==4) { Serial.print( Unknown error at address 0x ); if (address 16) Serial.print( 0 ); Serial.println(address,HEX); } } if (nDevices == 0) Serial.println( No I2C devices found\\n ); else Serial.println( done\\n ); delay(5000); // wait 5 seconds for next scan }","title":"Scanner script"},{"location":"Libraries/liquid_crystal/#credit","text":"Library by Francisco Malpartida","title":"Credit"},{"location":"Libraries/servo/","text":"Servo To include the library into the sketch you're working on, include the library shown below at the top of your sketch. #include Servo.h Object To create a Servo object, follow the line of code below. Servo myservo; Methods myservo.attach(pin); pin : the pin the signal pin of the servo is connected to The attach() method sets up the servo object and connects it to a digital pin. The digital pin MUST be one of the PWM enabled pins. myservo.write(pos) pos : the angle in degrees, from 0 to 180 The write() method turns the servo motor to a specific angle, between 0 and 180 degrees. /* Sweep by BARRAGAN http://barraganstudio.com This example code is in the public domain. modified 8 Nov 2013 by Scott Fitzgerald http://www.arduino.cc/en/Tutorial/Sweep */ #include Servo.h Servo myservo; // create servo object to control a servo // twelve servo objects can be created on most boards int pos = 0; // variable to store the servo position void setup() { myservo.attach(9); // attaches the servo on pin 9 to the servo object } void loop() { for (pos = 0; pos = 180; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree myservo.write(pos); // tell servo to go to position in variable 'pos' delay(15); // waits 15ms for the servo to reach the position } for (pos = 180; pos = 0; pos -= 1) { // goes from 180 degrees to 0 degrees myservo.write(pos); // tell servo to go to position in variable 'pos' delay(15); // waits 15ms for the servo to reach the position } }","title":"Servo"},{"location":"Libraries/servo/#servo","text":"To include the library into the sketch you're working on, include the library shown below at the top of your sketch. #include Servo.h","title":"Servo"},{"location":"Libraries/servo/#object","text":"To create a Servo object, follow the line of code below. Servo myservo;","title":"Object"},{"location":"Libraries/servo/#methods","text":"","title":"Methods"},{"location":"Libraries/servo/#myservoattachpin","text":"pin : the pin the signal pin of the servo is connected to The attach() method sets up the servo object and connects it to a digital pin. The digital pin MUST be one of the PWM enabled pins.","title":"myservo.attach(pin);"},{"location":"Libraries/servo/#myservowritepos","text":"pos : the angle in degrees, from 0 to 180 The write() method turns the servo motor to a specific angle, between 0 and 180 degrees. /* Sweep by BARRAGAN http://barraganstudio.com This example code is in the public domain. modified 8 Nov 2013 by Scott Fitzgerald http://www.arduino.cc/en/Tutorial/Sweep */ #include Servo.h Servo myservo; // create servo object to control a servo // twelve servo objects can be created on most boards int pos = 0; // variable to store the servo position void setup() { myservo.attach(9); // attaches the servo on pin 9 to the servo object } void loop() { for (pos = 0; pos = 180; pos += 1) { // goes from 0 degrees to 180 degrees // in steps of 1 degree myservo.write(pos); // tell servo to go to position in variable 'pos' delay(15); // waits 15ms for the servo to reach the position } for (pos = 180; pos = 0; pos -= 1) { // goes from 180 degrees to 0 degrees myservo.write(pos); // tell servo to go to position in variable 'pos' delay(15); // waits 15ms for the servo to reach the position } }","title":"myservo.write(pos)"},{"location":"Math/math/","text":"Math Mathematical operations can be performed within your code. In addition to basic operations, there are a few shorthand ways to do simple math. Look below to see some examples. Addition Denoted by the + sign. x = 5 + 6; //x = 11 x = x + 1; //Increment x by 1; Add 1 to x and overwrite the old value of x with the new one x++; //Increment x by 1; shorthand version of the line above x += 3; //Add 3 to x; compound addition Subtraction Denoted by the - sign. x = 7 - 2; //x = 5 x = x - 1; //Decrement x by 1; Add 1 to x and overwrite the old value of x with the new one x--; //Decrement x by 1; shorthand version of the line above x -= 3; //Subtract 3 from x; compound subtraction Multiplication Denoted by the * . x = 3 * 2; //x = 6 x = x * 3; //Multiply x by 3 and overwrite the old value of x with the new one x *= 5; //Multiply x by 5; compound multiplication Division Denoted by the / . x = 8 / 2; //x = 4 x = x / 3; //Divide x by 3 and overwrite the old value of x with the new one x /= 5; //Divide x by 5; compound division Mod The modulus - mod for short - is the remainder found when doing division. It is denoted using the % sign. x = 7 % 5; //x = 2 x = 10 % 5; //x = 0 x = 9 % 5; //x = 4 Math Functions max() Description Calculates and returns the maximum value of two numbers Syntax z = max(x, y); x : first value y : second value Example x = max(5, 3); //x = 5 min() Description Calculates and returns the minimum value of two numbers Syntax z = min(x, y); x : first value y : second value Example x = min(6, 4); //x = 4 map() Description The map() function converts an input value from one scale to another scale. A common use for this function is converting from the analog input scale, 0-1023, to the analog output scale, 0-255. Syntax x = map(value, lowInput, highInput, lowOutput, highOutput); value : input value lowInput : lower bound of the input scale highInput : upper bound of the input scale lowOutput : lower bound of the output scale highOutput : upper bound of the output scale Example value = map(value, 0, 10, 0, 100); //Convert 'value' from a scale of 0-10 to a //scale of 0-100 and overwrite the old value of 'value' with the new one abs() Description Calculates and returns the absolute value of a number. Syntax x = abs(y) y : input value Example x = abs(-5); //take the absolute value of -5 and save it into x; x = 5 constrain() Description Constrains, or restricts, the input value to a certain range. Syntax x = constrain(x, low, high) x : the input low : the lower bound high : the upper bound Examples x = constrain(14, 0, 10); //x = 10; y = constraint(54, 20, 100); //y = 54; the 54 is within the constrained range Trigonometric Functions cos() Description Calculates and returns the cosine of an angle. The function takes angles measured in radians, not degrees. Syntax x = cos(rad); rad is the angle in radians. It accepts floating point numbers Examples x = cos(0.523599); //x = 0.866 sin() Description Calculates and returns the sine of an angle. The function takes angles measured in radians, not degrees. Syntax x = sin(rad); rad is the angle in radians. It accepts floating point numbers Examples x = sin(0.523599); //x = 0.5 tan() Description Calculates and returns the tangent of an angle. The function takes angles measured in radians, not degrees. Syntax x = tan(rad); rad is the angle in radians. It accepts floating point numbers Examples x = tan(0.523599); //x = 0.57735027","title":"Math"},{"location":"Math/math/#math","text":"Mathematical operations can be performed within your code. In addition to basic operations, there are a few shorthand ways to do simple math. Look below to see some examples.","title":"Math"},{"location":"Math/math/#addition","text":"Denoted by the + sign. x = 5 + 6; //x = 11 x = x + 1; //Increment x by 1; Add 1 to x and overwrite the old value of x with the new one x++; //Increment x by 1; shorthand version of the line above x += 3; //Add 3 to x; compound addition","title":"Addition"},{"location":"Math/math/#subtraction","text":"Denoted by the - sign. x = 7 - 2; //x = 5 x = x - 1; //Decrement x by 1; Add 1 to x and overwrite the old value of x with the new one x--; //Decrement x by 1; shorthand version of the line above x -= 3; //Subtract 3 from x; compound subtraction","title":"Subtraction"},{"location":"Math/math/#multiplication","text":"Denoted by the * . x = 3 * 2; //x = 6 x = x * 3; //Multiply x by 3 and overwrite the old value of x with the new one x *= 5; //Multiply x by 5; compound multiplication","title":"Multiplication"},{"location":"Math/math/#division","text":"Denoted by the / . x = 8 / 2; //x = 4 x = x / 3; //Divide x by 3 and overwrite the old value of x with the new one x /= 5; //Divide x by 5; compound division","title":"Division"},{"location":"Math/math/#mod","text":"The modulus - mod for short - is the remainder found when doing division. It is denoted using the % sign. x = 7 % 5; //x = 2 x = 10 % 5; //x = 0 x = 9 % 5; //x = 4","title":"Mod"},{"location":"Math/math/#math-functions","text":"","title":"Math Functions"},{"location":"Math/math/#max","text":"","title":"max()"},{"location":"Math/math/#description","text":"Calculates and returns the maximum value of two numbers","title":"Description"},{"location":"Math/math/#syntax","text":"z = max(x, y); x : first value y : second value","title":"Syntax"},{"location":"Math/math/#example","text":"x = max(5, 3); //x = 5","title":"Example"},{"location":"Math/math/#min","text":"","title":"min()"},{"location":"Math/math/#description_1","text":"Calculates and returns the minimum value of two numbers","title":"Description"},{"location":"Math/math/#syntax_1","text":"z = min(x, y); x : first value y : second value","title":"Syntax"},{"location":"Math/math/#example_1","text":"x = min(6, 4); //x = 4","title":"Example"},{"location":"Math/math/#map","text":"","title":"map()"},{"location":"Math/math/#description_2","text":"The map() function converts an input value from one scale to another scale. A common use for this function is converting from the analog input scale, 0-1023, to the analog output scale, 0-255.","title":"Description"},{"location":"Math/math/#syntax_2","text":"x = map(value, lowInput, highInput, lowOutput, highOutput); value : input value lowInput : lower bound of the input scale highInput : upper bound of the input scale lowOutput : lower bound of the output scale highOutput : upper bound of the output scale","title":"Syntax"},{"location":"Math/math/#example_2","text":"value = map(value, 0, 10, 0, 100); //Convert 'value' from a scale of 0-10 to a //scale of 0-100 and overwrite the old value of 'value' with the new one","title":"Example"},{"location":"Math/math/#abs","text":"","title":"abs()"},{"location":"Math/math/#description_3","text":"Calculates and returns the absolute value of a number.","title":"Description"},{"location":"Math/math/#syntax_3","text":"x = abs(y) y : input value","title":"Syntax"},{"location":"Math/math/#example_3","text":"x = abs(-5); //take the absolute value of -5 and save it into x; x = 5","title":"Example"},{"location":"Math/math/#constrain","text":"","title":"constrain()"},{"location":"Math/math/#description_4","text":"Constrains, or restricts, the input value to a certain range.","title":"Description"},{"location":"Math/math/#syntax_4","text":"x = constrain(x, low, high) x : the input low : the lower bound high : the upper bound","title":"Syntax"},{"location":"Math/math/#examples","text":"x = constrain(14, 0, 10); //x = 10; y = constraint(54, 20, 100); //y = 54; the 54 is within the constrained range","title":"Examples"},{"location":"Math/math/#trigonometric-functions","text":"","title":"Trigonometric Functions"},{"location":"Math/math/#cos","text":"","title":"cos()"},{"location":"Math/math/#description_5","text":"Calculates and returns the cosine of an angle. The function takes angles measured in radians, not degrees.","title":"Description"},{"location":"Math/math/#syntax_5","text":"x = cos(rad); rad is the angle in radians. It accepts floating point numbers","title":"Syntax"},{"location":"Math/math/#examples_1","text":"x = cos(0.523599); //x = 0.866","title":"Examples"},{"location":"Math/math/#sin","text":"","title":"sin()"},{"location":"Math/math/#description_6","text":"Calculates and returns the sine of an angle. The function takes angles measured in radians, not degrees.","title":"Description"},{"location":"Math/math/#syntax_6","text":"x = sin(rad); rad is the angle in radians. It accepts floating point numbers","title":"Syntax"},{"location":"Math/math/#examples_2","text":"x = sin(0.523599); //x = 0.5","title":"Examples"},{"location":"Math/math/#tan","text":"","title":"tan()"},{"location":"Math/math/#description_7","text":"Calculates and returns the tangent of an angle. The function takes angles measured in radians, not degrees.","title":"Description"},{"location":"Math/math/#syntax_7","text":"x = tan(rad); rad is the angle in radians. It accepts floating point numbers","title":"Syntax"},{"location":"Math/math/#examples_3","text":"x = tan(0.523599); //x = 0.57735027","title":"Examples"},{"location":"Random/random/","text":"Random random() Description Generates and returns a pseudo-random number. Syntax random(max) random(min, max) max : upper bound of the random value, exclusive min : lower bound of the random value, inclusive Example randNum = random(10); //Generate a random number from 0-9 randNum2 = random(20,31); //Generate a random number from 20-31 randomSeed() Description Initializes the random number generator with a 'seed' value. It is common to use the analogRead() value of an analog pin as the seed value. Syntax randomSeed(seed) seed : the number used to initialize the random number generator Example randomSeed(analogRead(A0)); Example Sketch long randNum; void setup() { randomSeed(analogRead(A0)); } void loop() { randNum = random(100, 600); digitalWrite(13, HIGH,); delay(randNum) digitalWrite(13, LOW); delay(randNum); }","title":"Random"},{"location":"Random/random/#random","text":"","title":"Random"},{"location":"Random/random/#random_1","text":"","title":"random()"},{"location":"Random/random/#description","text":"Generates and returns a pseudo-random number.","title":"Description"},{"location":"Random/random/#syntax","text":"random(max) random(min, max) max : upper bound of the random value, exclusive min : lower bound of the random value, inclusive","title":"Syntax"},{"location":"Random/random/#example","text":"randNum = random(10); //Generate a random number from 0-9 randNum2 = random(20,31); //Generate a random number from 20-31","title":"Example"},{"location":"Random/random/#randomseed","text":"","title":"randomSeed()"},{"location":"Random/random/#description_1","text":"Initializes the random number generator with a 'seed' value. It is common to use the analogRead() value of an analog pin as the seed value.","title":"Description"},{"location":"Random/random/#syntax_1","text":"randomSeed(seed) seed : the number used to initialize the random number generator","title":"Syntax"},{"location":"Random/random/#example_1","text":"randomSeed(analogRead(A0));","title":"Example"},{"location":"Random/random/#example-sketch","text":"long randNum; void setup() { randomSeed(analogRead(A0)); } void loop() { randNum = random(100, 600); digitalWrite(13, HIGH,); delay(randNum) digitalWrite(13, LOW); delay(randNum); }","title":"Example Sketch"},{"location":"Serial/Serial_Monitor/","text":"Serial Monitor The serial monitor is a window that allows you communicate with your Arduino. It is located in the bottom right hand corner of the editor. You can receive information from your Arduino such as if a button was pressed or what value is being received on an analog pin. The serial monitor in the UNO editor MUST be used with a delay of 100ms or more in the loop() when repeatedly printing to the serial monitor. This may be accomplished by other processes being computed in the code, or by use of a delay() function. If there is no delay, the editor can enter a continuous loop, unable to process any other commands. This can crash your browser and force you to restart. Object The serial monitor is interacted with using the pre-defind Serial object. The object contains all the methods that can be used to print and read from the serial monitor. The Arduino can be hooked up to several different output devices including LCD screens and touch screens. Because you can print to each of these, a general 'print' function won't work because you wouldn't know what you're printing to. Instead, each of these devices can have an object with an associated 'print' method. For the serial monitor, it looks like this. //Object.method(argument); Serial.print( Hello World ); Methods Serial.begin(BAUD) BAUD - the BAUD rate is the speed at which the Arduino and serial monitor communicate with eachother. The begin() method has to be called before any other method. It is usually used within the setup. Serial.print(var) var - any data type. Numbers, characters, strings, and variables can be entered into the print method. The print method will print the argument entered. It does not skip a line after printing. Serial.println(var) var - any data type. Numbers, characters, strings, and variables can be entered into the print method. The println method will print the argument entered, and then skips to the next line. Examples int myInt = 5; String myString = This is a string! ; void setup() { Serial.begin(9600); Serial.print( Hello ); //Print 'Hello' and don't skip a line Serial.println( World ); //Print 'World' with a space in front of it on the same line as 'Hello'. ln skips to the next line Serial.println( This is a new line ); //This line is printed on the next line Serial.println(myInt); //Printing variables doesn't require quotes Serial.println(myString); //Printing string variables also doesn't require quotes. Serial.println(9001); } void loop() { } Credits For more information see the Arduino reference page for the serial monitor","title":"Serial Monitor"},{"location":"Serial/Serial_Monitor/#serial-monitor","text":"The serial monitor is a window that allows you communicate with your Arduino. It is located in the bottom right hand corner of the editor. You can receive information from your Arduino such as if a button was pressed or what value is being received on an analog pin. The serial monitor in the UNO editor MUST be used with a delay of 100ms or more in the loop() when repeatedly printing to the serial monitor. This may be accomplished by other processes being computed in the code, or by use of a delay() function. If there is no delay, the editor can enter a continuous loop, unable to process any other commands. This can crash your browser and force you to restart.","title":"Serial Monitor"},{"location":"Serial/Serial_Monitor/#object","text":"The serial monitor is interacted with using the pre-defind Serial object. The object contains all the methods that can be used to print and read from the serial monitor. The Arduino can be hooked up to several different output devices including LCD screens and touch screens. Because you can print to each of these, a general 'print' function won't work because you wouldn't know what you're printing to. Instead, each of these devices can have an object with an associated 'print' method. For the serial monitor, it looks like this. //Object.method(argument); Serial.print( Hello World );","title":"Object"},{"location":"Serial/Serial_Monitor/#methods","text":"","title":"Methods"},{"location":"Serial/Serial_Monitor/#serialbeginbaud","text":"BAUD - the BAUD rate is the speed at which the Arduino and serial monitor communicate with eachother. The begin() method has to be called before any other method. It is usually used within the setup.","title":"Serial.begin(BAUD)"},{"location":"Serial/Serial_Monitor/#serialprintvar","text":"var - any data type. Numbers, characters, strings, and variables can be entered into the print method. The print method will print the argument entered. It does not skip a line after printing.","title":"Serial.print(var)"},{"location":"Serial/Serial_Monitor/#serialprintlnvar","text":"var - any data type. Numbers, characters, strings, and variables can be entered into the print method. The println method will print the argument entered, and then skips to the next line.","title":"Serial.println(var)"},{"location":"Serial/Serial_Monitor/#examples","text":"int myInt = 5; String myString = This is a string! ; void setup() { Serial.begin(9600); Serial.print( Hello ); //Print 'Hello' and don't skip a line Serial.println( World ); //Print 'World' with a space in front of it on the same line as 'Hello'. ln skips to the next line Serial.println( This is a new line ); //This line is printed on the next line Serial.println(myInt); //Printing variables doesn't require quotes Serial.println(myString); //Printing string variables also doesn't require quotes. Serial.println(9001); } void loop() { }","title":"Examples"},{"location":"Serial/Serial_Monitor/#credits","text":"For more information see the Arduino reference page for the serial monitor","title":"Credits"},{"location":"Syntax/syntax/","text":"Syntax Many programming languages share a similar set of coding tools and operations. However, they often differ in how these operations get written; their syntax . Look below to see some of the syntax of the Arduino language. Structure Every Arduino sketch must have a setup and loop function. Beyond that, you will often include libraries, global variables, and user defined functions. Look below for an example of how this will typically look. //Included Libraries #include Servo.h //Global variables int angle = 90; int var = 0; void setup() { // put your setup code here, to run once: } void loop() { // put your main code here, to run repeatedly: } void myFunction() { // my code } Comments Comments are used in your code to explain it for yourselves and for others to read. Single line comments are written by starting a line with // //This is a single line comment Block comments are written by surrounding a comment with / **/ /*This is a block comment */ Conditional Statements Conditional statements are ways to evaluate if something is true or false. Is p equal to q? Is 5 4? Conditional statements are often used in programming to determine what should happen in the code. Look below to see how various conditional statements are written. == (equal to) != (not equal to) (less than) = (less than or equal to) (greater than) = (greater than or equal to) If Statements If statements are coding tools that run a block of code if a conditional statement is true. If a statement is not true, that code block will be skipped over. After an if statement you may have an else if or else statment. An else if statment is an if statment that gets evaluated only if the preceeding if or else if statement evaluates as false. An else statement runs if the preceeding if or else if statement evaluates as false. The code block that runs if one of these statements is true is contained within the curly brackets, like this: { //code block } . if (var == 5) { //do something } else if (var 5) { //do something else } else { //do something different } While Loops A while loop repeats a code block as long as the conditional statement evaluates as true. You need to be careful to write code within the while loop that will eventually cause the while loop to evaluate as false. Otherwise, your code can get stuck in a never ending loop. while (condition == true) { //do things } For Loops For loops allow you to repeat a code block a certain number of times while incrementing a variable, called a counter , each time the for loop goes through a cycle. The three arguments are the initialization, condition, and increment, respectively. The initialization step initializes the counter variable. The condition specifies the condition under which the for loop keeps operating. Once the condition evaluates as false, the for loop stops running. The increment either increases or decreases, decrements, the counter. The shorthand way of doing this is counter++ or counter--. for (int i = 0; i 10; i++) { Serial.println(i); } Switch Case A switch case works, essentially, like several else if statements. An argument is fed in and is evaluated against several cases. If the argument is equal to any of the cases, the code contained within that case will run. If no cases are true, the optional default will run or, if there is no default defined, the switch case will be skipped over. switch (var) { case 1: //do something when var equals 1 break; case 2: //do something when var equals 2 break; default: // if nothing else matches, do the default // default is optional break; } Credit https://www.arduino.cc/reference/en/","title":"Syntax"},{"location":"Syntax/syntax/#syntax","text":"Many programming languages share a similar set of coding tools and operations. However, they often differ in how these operations get written; their syntax . Look below to see some of the syntax of the Arduino language.","title":"Syntax"},{"location":"Syntax/syntax/#structure","text":"Every Arduino sketch must have a setup and loop function. Beyond that, you will often include libraries, global variables, and user defined functions. Look below for an example of how this will typically look. //Included Libraries #include Servo.h //Global variables int angle = 90; int var = 0; void setup() { // put your setup code here, to run once: } void loop() { // put your main code here, to run repeatedly: } void myFunction() { // my code }","title":"Structure"},{"location":"Syntax/syntax/#comments","text":"Comments are used in your code to explain it for yourselves and for others to read. Single line comments are written by starting a line with // //This is a single line comment Block comments are written by surrounding a comment with / **/ /*This is a block comment */","title":"Comments"},{"location":"Syntax/syntax/#conditional-statements","text":"Conditional statements are ways to evaluate if something is true or false. Is p equal to q? Is 5 4? Conditional statements are often used in programming to determine what should happen in the code. Look below to see how various conditional statements are written. == (equal to) != (not equal to) (less than) = (less than or equal to) (greater than) = (greater than or equal to)","title":"Conditional Statements"},{"location":"Syntax/syntax/#if-statements","text":"If statements are coding tools that run a block of code if a conditional statement is true. If a statement is not true, that code block will be skipped over. After an if statement you may have an else if or else statment. An else if statment is an if statment that gets evaluated only if the preceeding if or else if statement evaluates as false. An else statement runs if the preceeding if or else if statement evaluates as false. The code block that runs if one of these statements is true is contained within the curly brackets, like this: { //code block } . if (var == 5) { //do something } else if (var 5) { //do something else } else { //do something different }","title":"If Statements"},{"location":"Syntax/syntax/#while-loops","text":"A while loop repeats a code block as long as the conditional statement evaluates as true. You need to be careful to write code within the while loop that will eventually cause the while loop to evaluate as false. Otherwise, your code can get stuck in a never ending loop. while (condition == true) { //do things }","title":"While Loops"},{"location":"Syntax/syntax/#for-loops","text":"For loops allow you to repeat a code block a certain number of times while incrementing a variable, called a counter , each time the for loop goes through a cycle. The three arguments are the initialization, condition, and increment, respectively. The initialization step initializes the counter variable. The condition specifies the condition under which the for loop keeps operating. Once the condition evaluates as false, the for loop stops running. The increment either increases or decreases, decrements, the counter. The shorthand way of doing this is counter++ or counter--. for (int i = 0; i 10; i++) { Serial.println(i); }","title":"For Loops"},{"location":"Syntax/syntax/#switch-case","text":"A switch case works, essentially, like several else if statements. An argument is fed in and is evaluated against several cases. If the argument is equal to any of the cases, the code contained within that case will run. If no cases are true, the optional default will run or, if there is no default defined, the switch case will be skipped over. switch (var) { case 1: //do something when var equals 1 break; case 2: //do something when var equals 2 break; default: // if nothing else matches, do the default // default is optional break; }","title":"Switch Case"},{"location":"Syntax/syntax/#credit","text":"https://www.arduino.cc/reference/en/","title":"Credit"},{"location":"Time/time/","text":"Time The functions below allow you to wait for a period of time or return the current time. delay() Description Wait a speicified number of milliseconds. The Arduino does not run any other code while it is busy delaying. Syntax delay(milliseconds); milliseconds : the number of milliseconds you wish to delay. There are 1,000 milliseconds in a second. Example digitalWrite(13,HIGH); delay(1000); //Delay one second. digitalWrite(13,LOW); delay(1000); //Delay one second. delayMicroseconds Description Wait a speicified number of microseconds. The Arduino does not run any other code while it is busy delaying. Delays greater than 16,383 microseconds may not be accurate with this function. Syntax delayMicroseconds(microseconds); microseconds : the number of microseconds you wish to delay. There are 1,000,000 microseconds in a second. Example digitalWrite(13,HIGH); delayMicroseconds(1000000); //Delay one second. digitalWrite(13,LOW); delayMicroseconds(500); //Delay 500 microseconds millis() Description Returns the time, in milliseconds, since the Arduino began running. After about 49.7 days the millis() function will reset to 0. This is because the data type returned, an unsigned long, can only hold 49.7 days worth of milliseconds. Syntax currentTime = millis(); Example unsigned long currentTime = millis(); void setup(){ } void loop() { currentTime = millis() //Turn the LED on after 1 second passes if (currentTime = 1000) { digitalWrite(13, HIGH); } } micros() Description Returns the time, in microseconds, since the Arduino began running. After about 70 minutes the micros() function will reset to 0. The resolution of the micros() function is 4 microseconds. Syntax currentTime = micros(); Example unsigned long currentTime = micros(); void setup(){ } void loop() { currentTime = micros() //Turn the LED on after 500 \u03bcs pass if (currentTime = 1000) { digitalWrite(13, HIGH); } }","title":"Time"},{"location":"Time/time/#time","text":"The functions below allow you to wait for a period of time or return the current time.","title":"Time"},{"location":"Time/time/#delay","text":"","title":"delay()"},{"location":"Time/time/#description","text":"Wait a speicified number of milliseconds. The Arduino does not run any other code while it is busy delaying.","title":"Description"},{"location":"Time/time/#syntax","text":"delay(milliseconds); milliseconds : the number of milliseconds you wish to delay. There are 1,000 milliseconds in a second.","title":"Syntax"},{"location":"Time/time/#example","text":"digitalWrite(13,HIGH); delay(1000); //Delay one second. digitalWrite(13,LOW); delay(1000); //Delay one second.","title":"Example"},{"location":"Time/time/#delaymicroseconds","text":"","title":"delayMicroseconds"},{"location":"Time/time/#description_1","text":"Wait a speicified number of microseconds. The Arduino does not run any other code while it is busy delaying. Delays greater than 16,383 microseconds may not be accurate with this function.","title":"Description"},{"location":"Time/time/#syntax_1","text":"delayMicroseconds(microseconds); microseconds : the number of microseconds you wish to delay. There are 1,000,000 microseconds in a second.","title":"Syntax"},{"location":"Time/time/#example_1","text":"digitalWrite(13,HIGH); delayMicroseconds(1000000); //Delay one second. digitalWrite(13,LOW); delayMicroseconds(500); //Delay 500 microseconds","title":"Example"},{"location":"Time/time/#millis","text":"","title":"millis()"},{"location":"Time/time/#description_2","text":"Returns the time, in milliseconds, since the Arduino began running. After about 49.7 days the millis() function will reset to 0. This is because the data type returned, an unsigned long, can only hold 49.7 days worth of milliseconds.","title":"Description"},{"location":"Time/time/#syntax_2","text":"currentTime = millis();","title":"Syntax"},{"location":"Time/time/#example_2","text":"unsigned long currentTime = millis(); void setup(){ } void loop() { currentTime = millis() //Turn the LED on after 1 second passes if (currentTime = 1000) { digitalWrite(13, HIGH); } }","title":"Example"},{"location":"Time/time/#micros","text":"","title":"micros()"},{"location":"Time/time/#description_3","text":"Returns the time, in microseconds, since the Arduino began running. After about 70 minutes the micros() function will reset to 0. The resolution of the micros() function is 4 microseconds.","title":"Description"},{"location":"Time/time/#syntax_3","text":"currentTime = micros();","title":"Syntax"},{"location":"Time/time/#example_3","text":"unsigned long currentTime = micros(); void setup(){ } void loop() { currentTime = micros() //Turn the LED on after 500 \u03bcs pass if (currentTime = 1000) { digitalWrite(13, HIGH); } }","title":"Example"}]}