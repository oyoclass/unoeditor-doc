{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Arduino is a microcontroller board that can be programmed to control electrical devices such as lights and motors. They're often used to make quadcopters, thermostats, 3D printers, and more. The Arduino language is based on C/C++, but also has a many of its own special functions and constants. The main structure of an Arduino program, called a sketch, includes a setup function and a continuous loop function. The setup runs once, and the loop runs continuously after that for as long as the Arduino is powered. It looks like this: //The setup runs once when the Arduino is powered/turned on void setup() { //Your setup code goes in here } //The loop runs continuously, starting after the setup is finished running. void loop() { //The rest of your code goes in here } The Arduino can be programmed using the Arduino IDE when using PCs, Macs, or Linux computers. When using a Chromebook, the Arduino can be programmed using the UNO editor on the OYOclass platform. UNO Editor The UNO editor is a development environment that can compile and upload your code to an Arduino UNO type board when used with the associated Chromebook app. The editor is only able to upload code to a board when used on a Chromebook. It can, however, be used to compile and verify code, as well as share code when using both Chromebook and non-Chromebook computers. Another benefit of the UNO editor, it's lightning fast! The libraries are pre-compiled, so only the code you type has to be compiled. User Interface File The File button is where you will find the new file, open, save, rename, and download options. This is also where you can manage and delete your files, and view your saving histories (older versions). Verify The Verify button checks your code for syntax errors and compiles it. Compilation is the process of translating one language to another. In this case, the Arduino code is translated into the machine code that the Arduino understands. Upload to board The Upload to board button will compile your code, then upload, or flash, your code to the board. Compiling Status The compiling status is shown in the window in the lower left hand","title":"Home"},{"location":"#uno-editor","text":"The UNO editor is a development environment that can compile and upload your code to an Arduino UNO type board when used with the associated Chromebook app. The editor is only able to upload code to a board when used on a Chromebook. It can, however, be used to compile and verify code, as well as share code when using both Chromebook and non-Chromebook computers. Another benefit of the UNO editor, it's lightning fast! The libraries are pre-compiled, so only the code you type has to be compiled.","title":"UNO Editor"},{"location":"#user-interface","text":"","title":"User Interface"},{"location":"#file","text":"The File button is where you will find the new file, open, save, rename, and download options. This is also where you can manage and delete your files, and view your saving histories (older versions).","title":"File"},{"location":"#verify","text":"The Verify button checks your code for syntax errors and compiles it. Compilation is the process of translating one language to another. In this case, the Arduino code is translated into the machine code that the Arduino understands.","title":"Verify"},{"location":"#upload-to-board","text":"The Upload to board button will compile your code, then upload, or flash, your code to the board.","title":"Upload to board"},{"location":"#compiling-status","text":"The compiling status is shown in the window in the lower left hand","title":"Compiling Status"},{"location":"Builtin/builtin/","text":"Builtin Functions The Arduino language is based on C/C++, but it also comes with many of its own builtin functions. Below are some of the core builtin functions. pinMode() Description Sets up a pin to be either an input or output. This allows the Arduino to allocate current appropriately Syntax pinMode(pin, mode); pin: the number of the pin being used mode: INPUT or OUTPUT Examples pinMode(13, OUTPUT); pinMode(10, INPUT); digitalWrite() Description Sets a pin to be either HIGH, 5V, or LOW, 0V or ground. The pin should be set to be an output using pinMode(). Syntax digitalWrite(pin, value); pin: the number of the pin being used value: HIGH or LOW (5V or GND) Examples digitalWrite(13, HIGH); digitalWrite(13, LOW); digitalRead() Description Reads and returns the value of a pin; either HIGH or LOW. The value of a pin is determined by it's voltage with 0-3V being LOW and 3-5V being HIGH. Syntax digitalRead(pin); pin: the number of the pin being used Example val = digitalRead(2); //read the value on pin 2 and save the result in 'val' analogWrite() Description Uses PWM to set a pin to a voltage between 0V and 5V. PWM, pusle width modulation, turns the pin on and off quickly, simulating an in between value. The pin should be set to be an output using pinMode(). Syntax analogWrite(pin, value); pin: the number of the pin being used value: 0-255 (0V-5V) Example analogWrite(6, 186); //send a PWM signal through pin 6. analogRead() Description Reads and returns the value of an analog pin on a range of 0-1023. The value of the pin changes with voltage with 0V being returned as 0 and 5V being returned as 1023. Analog pins are pins A0-A5 Syntax analogRead(pin); pin: the number of the pin being used Example val = analogRead(A0); //read the value on pin A0 and save the result in 'val.' delay() Description Wait a speicified number of milliseconds. The Arduino does not run any other code while it is busy delaying. Syntax delay(milliseconds); milliseconds: the number of milliseconds you wish to delay. There are 1,000 milliseconds in a second. Example digitalWrite(13,HIGH); delay(1000); digitalWrite(13,LOW); delay(1000);","title":"Core Functions"},{"location":"Builtin/builtin/#builtin-functions","text":"The Arduino language is based on C/C++, but it also comes with many of its own builtin functions. Below are some of the core builtin functions.","title":"Builtin Functions"},{"location":"Builtin/builtin/#pinmode","text":"","title":"pinMode()"},{"location":"Builtin/builtin/#description","text":"Sets up a pin to be either an input or output. This allows the Arduino to allocate current appropriately","title":"Description"},{"location":"Builtin/builtin/#syntax","text":"pinMode(pin, mode); pin: the number of the pin being used mode: INPUT or OUTPUT","title":"Syntax"},{"location":"Builtin/builtin/#examples","text":"pinMode(13, OUTPUT); pinMode(10, INPUT);","title":"Examples"},{"location":"Builtin/builtin/#digitalwrite","text":"","title":"digitalWrite()"},{"location":"Builtin/builtin/#description_1","text":"Sets a pin to be either HIGH, 5V, or LOW, 0V or ground. The pin should be set to be an output using pinMode().","title":"Description"},{"location":"Builtin/builtin/#syntax_1","text":"digitalWrite(pin, value); pin: the number of the pin being used value: HIGH or LOW (5V or GND)","title":"Syntax"},{"location":"Builtin/builtin/#examples_1","text":"digitalWrite(13, HIGH); digitalWrite(13, LOW);","title":"Examples"},{"location":"Builtin/builtin/#digitalread","text":"","title":"digitalRead()"},{"location":"Builtin/builtin/#description_2","text":"Reads and returns the value of a pin; either HIGH or LOW. The value of a pin is determined by it's voltage with 0-3V being LOW and 3-5V being HIGH.","title":"Description"},{"location":"Builtin/builtin/#syntax_2","text":"digitalRead(pin); pin: the number of the pin being used","title":"Syntax"},{"location":"Builtin/builtin/#example","text":"val = digitalRead(2); //read the value on pin 2 and save the result in 'val'","title":"Example"},{"location":"Builtin/builtin/#analogwrite","text":"","title":"analogWrite()"},{"location":"Builtin/builtin/#description_3","text":"Uses PWM to set a pin to a voltage between 0V and 5V. PWM, pusle width modulation, turns the pin on and off quickly, simulating an in between value. The pin should be set to be an output using pinMode().","title":"Description"},{"location":"Builtin/builtin/#syntax_3","text":"analogWrite(pin, value); pin: the number of the pin being used value: 0-255 (0V-5V)","title":"Syntax"},{"location":"Builtin/builtin/#example_1","text":"analogWrite(6, 186); //send a PWM signal through pin 6.","title":"Example"},{"location":"Builtin/builtin/#analogread","text":"","title":"analogRead()"},{"location":"Builtin/builtin/#description_4","text":"Reads and returns the value of an analog pin on a range of 0-1023. The value of the pin changes with voltage with 0V being returned as 0 and 5V being returned as 1023. Analog pins are pins A0-A5","title":"Description"},{"location":"Builtin/builtin/#syntax_4","text":"analogRead(pin); pin: the number of the pin being used","title":"Syntax"},{"location":"Builtin/builtin/#example_2","text":"val = analogRead(A0); //read the value on pin A0 and save the result in 'val.'","title":"Example"},{"location":"Builtin/builtin/#delay","text":"","title":"delay()"},{"location":"Builtin/builtin/#description_5","text":"Wait a speicified number of milliseconds. The Arduino does not run any other code while it is busy delaying.","title":"Description"},{"location":"Builtin/builtin/#syntax_5","text":"delay(milliseconds); milliseconds: the number of milliseconds you wish to delay. There are 1,000 milliseconds in a second.","title":"Syntax"},{"location":"Builtin/builtin/#example_3","text":"digitalWrite(13,HIGH); delay(1000); digitalWrite(13,LOW); delay(1000);","title":"Example"},{"location":"Comparison/comparison_operators/","text":"Comparison Also Comparison Comparison 3 Comparison 4 Comparison 5 Comparison 6 p1 p2 p3 == (equal to) != (not equal to) (less than) = (less than or equal to) (greater than) = (greater than or equal to)","title":"Comparison"},{"location":"Comparison/comparison_operators/#comparison","text":"","title":"Comparison"},{"location":"Comparison/comparison_operators/#also-comparison","text":"","title":"Also Comparison"},{"location":"Comparison/comparison_operators/#comparison-3","text":"","title":"Comparison 3"},{"location":"Comparison/comparison_operators/#comparison-4","text":"","title":"Comparison 4"},{"location":"Comparison/comparison_operators/#comparison-5","text":"","title":"Comparison 5"},{"location":"Comparison/comparison_operators/#comparison-6","text":"p1 p2 p3 == (equal to) != (not equal to) (less than) = (less than or equal to) (greater than) = (greater than or equal to)","title":"Comparison 6"},{"location":"Data_Types/data_types/","text":"Data Types Data can be stored in variables. Each variable has a particular type of data it can store, called a data type. Example of data types can be numbers, characters, strings of text, etc. Here is an example of each of the data types reviewed on this page. Continue down for more details. int var1 = 5; long millisecondsInADay = 86400000; float var1 = 3.14159; bool isOn = true; char var1 = 'A'; int myIntArray[] = {9, 8, 7, 6}; int Description Int stands for integer. An integer is any whole number, both positive and negative. Size 2 bytes Range -32,768 to 32,767 Examples int var1 = 5; int var2 = -3; int var3 = 0; int var4; //undefined long Description Any whole number, both positive and negative.A long data type is like an int data type, but takes up twice the data, allowing the storage of larger numbers. Size 4 bytes Range -2,147,483,648 to 2,147,483,647 Examples long millisecondsInADay = 86400000; //86,400,000 milliseconds in a day long var1 = -1500000000; //-1,500,000,000 long var2; //undefined float Description Float stands for a floating-point number. It is a data type that can store numbers with decimals, 1.5, for example. When doing math with variables of a float data type, you will want to use numbers that are also floats in order to keep the values after the decimal. For example, use 1.0 instead of 1, as 1 is not a float. Floats only have 6-7 digits of precision. Additionally, floating point calculations take longer to compute. Size 4 bytes Range -3.4028235E+38 to 3.4028235E+38 Examples float var1 = 3.14159; float var2 = -5.4; float var3 = 0.0; float var4; //undefined bool Description A bool, or boolean, is a data type that stores either true or false . Size 1 byte Range true or false String Description A String data type contains a string of text. The text can have letters, numbers, and special characters. The contents of a String goes within double quotes. Examples bool isOn = true; bool lightsOn = false; int bool; //undefined char Description Char stands for character. A char data type contains a single character, including letters, numbers, and special characters. The character stored in a char gets written between single quotes. The characters are actually stored as numbers in memory. These numbers get translated to the characters we recognize according to the ASCII chart. Size 1 byte Examples char var1 = 'A'; char var2 = 'b'; char var3 = '#'; array Description An array is a collection of several variables, organized under one variable name. Each variable within the array is given an index number,its order within the array. All of the values stored within the array must be of the same type. An item within an array can be retrieved by calling the array name with the index number, starting at 0 for the first item in the array. An example is shown below. int myArray[] = {9, 8, 7, 6}; return myArray[2]; //Returns 7, the third item in myArray Arrays can be initialized with values, or can be declared as being empty with a specified length. Examples int myIntArray[] = {9, 8, 7, 6}; //An int array with 4 indices float myFloatArray[] = {9.8, 5.7, 7.6, 8.9}; //A float array with 4 indices char myCharArray[] = {'a', 'b', 'c'}; //A char array with 3 indices int myArray[6]; //An empty array with 6 indices","title":"Data Types"},{"location":"Data_Types/data_types/#data-types","text":"Data can be stored in variables. Each variable has a particular type of data it can store, called a data type. Example of data types can be numbers, characters, strings of text, etc. Here is an example of each of the data types reviewed on this page. Continue down for more details. int var1 = 5; long millisecondsInADay = 86400000; float var1 = 3.14159; bool isOn = true; char var1 = 'A'; int myIntArray[] = {9, 8, 7, 6};","title":"Data Types"},{"location":"Data_Types/data_types/#int","text":"","title":"int"},{"location":"Data_Types/data_types/#description","text":"Int stands for integer. An integer is any whole number, both positive and negative.","title":"Description"},{"location":"Data_Types/data_types/#size","text":"2 bytes","title":"Size"},{"location":"Data_Types/data_types/#range","text":"-32,768 to 32,767","title":"Range"},{"location":"Data_Types/data_types/#examples","text":"int var1 = 5; int var2 = -3; int var3 = 0; int var4; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#long","text":"","title":"long"},{"location":"Data_Types/data_types/#description_1","text":"Any whole number, both positive and negative.A long data type is like an int data type, but takes up twice the data, allowing the storage of larger numbers.","title":"Description"},{"location":"Data_Types/data_types/#size_1","text":"4 bytes","title":"Size"},{"location":"Data_Types/data_types/#range_1","text":"-2,147,483,648 to 2,147,483,647","title":"Range"},{"location":"Data_Types/data_types/#examples_1","text":"long millisecondsInADay = 86400000; //86,400,000 milliseconds in a day long var1 = -1500000000; //-1,500,000,000 long var2; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#float","text":"","title":"float"},{"location":"Data_Types/data_types/#description_2","text":"Float stands for a floating-point number. It is a data type that can store numbers with decimals, 1.5, for example. When doing math with variables of a float data type, you will want to use numbers that are also floats in order to keep the values after the decimal. For example, use 1.0 instead of 1, as 1 is not a float. Floats only have 6-7 digits of precision. Additionally, floating point calculations take longer to compute.","title":"Description"},{"location":"Data_Types/data_types/#size_2","text":"4 bytes","title":"Size"},{"location":"Data_Types/data_types/#range_2","text":"-3.4028235E+38 to 3.4028235E+38","title":"Range"},{"location":"Data_Types/data_types/#examples_2","text":"float var1 = 3.14159; float var2 = -5.4; float var3 = 0.0; float var4; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#bool","text":"","title":"bool"},{"location":"Data_Types/data_types/#description_3","text":"A bool, or boolean, is a data type that stores either true or false .","title":"Description"},{"location":"Data_Types/data_types/#size_3","text":"1 byte","title":"Size"},{"location":"Data_Types/data_types/#range_3","text":"true or false","title":"Range"},{"location":"Data_Types/data_types/#string","text":"","title":"String"},{"location":"Data_Types/data_types/#description_4","text":"A String data type contains a string of text. The text can have letters, numbers, and special characters. The contents of a String goes within double quotes.","title":"Description"},{"location":"Data_Types/data_types/#examples_3","text":"bool isOn = true; bool lightsOn = false; int bool; //undefined","title":"Examples"},{"location":"Data_Types/data_types/#char","text":"","title":"char"},{"location":"Data_Types/data_types/#description_5","text":"Char stands for character. A char data type contains a single character, including letters, numbers, and special characters. The character stored in a char gets written between single quotes. The characters are actually stored as numbers in memory. These numbers get translated to the characters we recognize according to the ASCII chart.","title":"Description"},{"location":"Data_Types/data_types/#size_4","text":"1 byte","title":"Size"},{"location":"Data_Types/data_types/#examples_4","text":"char var1 = 'A'; char var2 = 'b'; char var3 = '#';","title":"Examples"},{"location":"Data_Types/data_types/#array","text":"","title":"array"},{"location":"Data_Types/data_types/#description_6","text":"An array is a collection of several variables, organized under one variable name. Each variable within the array is given an index number,its order within the array. All of the values stored within the array must be of the same type. An item within an array can be retrieved by calling the array name with the index number, starting at 0 for the first item in the array. An example is shown below. int myArray[] = {9, 8, 7, 6}; return myArray[2]; //Returns 7, the third item in myArray Arrays can be initialized with values, or can be declared as being empty with a specified length.","title":"Description"},{"location":"Data_Types/data_types/#examples_5","text":"int myIntArray[] = {9, 8, 7, 6}; //An int array with 4 indices float myFloatArray[] = {9.8, 5.7, 7.6, 8.9}; //A float array with 4 indices char myCharArray[] = {'a', 'b', 'c'}; //A char array with 3 indices int myArray[6]; //An empty array with 6 indices","title":"Examples"},{"location":"Interrupts/interrupts/","text":"External Interrupts An external interrupt - sometimes called a hardware interrupt - is a piece of hardware that, when triggered, runs an interrupt service routine, ISR. An interrupt service routine is simply a user defined function that gets attached to an interrupt. When the interrupt is triggered, it stops the code the Arduino is running and runs the ISR. Once the ISR is finished running, the Arduino returns to running the code where it left off. A simple example is a button connected to an interrupt that switches the direction of a motor any time it's pushed, regardless of where the Arduino is in the code. The Arduino has two interrupts, 0 and 1, connected to pins 2 and 3, respectively. The can ge triggered by four different modes: Low : trigger the interrupt whenever the pin is low, 0V-3V. Falling : trigger the interrupt whenever the pin goes from high to low. Rising : trigger the interrupt whenever the pin goes from low to high. Change : trigger the interrupt whenever the pin changes from low to high, or vice versa. attachInterrupt() Description To set up an interrupt, you need to create an ISR, attach it to an interrupt pin, and choose the mode. You do this using the method attachInterrupt() . attachInterrupt() is typically used within the setup() . Note that you should use pinMode() to set up your interrupt pin as an input as well. Syntax attachInterrupt(digitalPinToInterrupt(pin), ISR, mode); pin : the number of the pin being used ISR : the name of the interrupt service routine your create at the bottom of your code mode : LOW, FALLING, RISING, or CHANGE digitalPinToInterrupt() : a function that takes in a pin number and returns the respective interrupt number (different versions of the Arduino have different interrupt pins). Examples int led = 13; int button = 2; int on = LOW; void setup() { pinMode(led, OUTPUT); pinMode(button, INPUT); attachInterrupt(digitalPinToInterrupt(button), ledChange, CHANGE); } void loop() { digitalWrite(ledPin, on); } void ledChange() { //ledChange is the name of the ISR on = !on; //Change the value of 'on' between LOW and HIGH }","title":"Interrupts"},{"location":"Interrupts/interrupts/#external-interrupts","text":"An external interrupt - sometimes called a hardware interrupt - is a piece of hardware that, when triggered, runs an interrupt service routine, ISR. An interrupt service routine is simply a user defined function that gets attached to an interrupt. When the interrupt is triggered, it stops the code the Arduino is running and runs the ISR. Once the ISR is finished running, the Arduino returns to running the code where it left off. A simple example is a button connected to an interrupt that switches the direction of a motor any time it's pushed, regardless of where the Arduino is in the code. The Arduino has two interrupts, 0 and 1, connected to pins 2 and 3, respectively. The can ge triggered by four different modes: Low : trigger the interrupt whenever the pin is low, 0V-3V. Falling : trigger the interrupt whenever the pin goes from high to low. Rising : trigger the interrupt whenever the pin goes from low to high. Change : trigger the interrupt whenever the pin changes from low to high, or vice versa.","title":"External Interrupts"},{"location":"Interrupts/interrupts/#attachinterrupt","text":"","title":"attachInterrupt()"},{"location":"Interrupts/interrupts/#description","text":"To set up an interrupt, you need to create an ISR, attach it to an interrupt pin, and choose the mode. You do this using the method attachInterrupt() . attachInterrupt() is typically used within the setup() . Note that you should use pinMode() to set up your interrupt pin as an input as well.","title":"Description"},{"location":"Interrupts/interrupts/#syntax","text":"attachInterrupt(digitalPinToInterrupt(pin), ISR, mode); pin : the number of the pin being used ISR : the name of the interrupt service routine your create at the bottom of your code mode : LOW, FALLING, RISING, or CHANGE digitalPinToInterrupt() : a function that takes in a pin number and returns the respective interrupt number (different versions of the Arduino have different interrupt pins).","title":"Syntax"},{"location":"Interrupts/interrupts/#examples","text":"int led = 13; int button = 2; int on = LOW; void setup() { pinMode(led, OUTPUT); pinMode(button, INPUT); attachInterrupt(digitalPinToInterrupt(button), ledChange, CHANGE); } void loop() { digitalWrite(ledPin, on); } void ledChange() { //ledChange is the name of the ISR on = !on; //Change the value of 'on' between LOW and HIGH }","title":"Examples"},{"location":"Math/math/","text":"Math Mathematical operations can be performed within your code. In addition to basic operations, there are a few shorthand ways to do simple math. Look below to see some examples. Addition Denoted by the + sign. x = 5 + 6; //x = 11 x = x + 1; //Increment x by 1; Add 1 to x and overwrite the old value of x with the new one x++; //Increment x by 1; shorthand version of the line above x += 3; //Add 3 to x; compound addition Subtraction Denoted by the - sign. x = 7 - 2; //x = 5 x = x - 1; //Decrement x by 1; Add 1 to x and overwrite the old value of x with the new one x--; //Decrement x by 1; shorthand version of the line above x -= 3; //Subtract 3 from x; compound subtraction Multiplication Denoted by the * . x = 3 * 2; //x = 6 x = x * 3; //Multiply x by 3 and overwrite the old value of x with the new one x *= 5; //Multiply x by 5; compound multiplication Division Denoted by the / . x = 8 / 2; //x = 4 x = x / 3; //Divide x by 3 and overwrite the old value of x with the new one x /= 5; //Divide x by 5; compound division Mod The modulus - mod for short - is the remainder found when doing division. It is denoted using the % sign. x = 7 % 5; //x = 2 x = 10 % 5; //x = 0 x = 9 % 5; //x = 4 Math Functions max() Description Calculates and returns the maximum value of two numbers Syntax z = max(x, y); x : first value y : second value Example x = max(5, 3); //x = 5 min() Description Calculates and returns the minimum value of two numbers Syntax z = min(x, y); x : first value y : second value Example x = min(6, 4); //x = 4 map() Description The map() function converts an input value from one scale to another scale. A common use for this function is converting from the analog input scale, 0-1023, to the analog output scale, 0-255. Syntax x = map(value, lowInput, highInput, lowOutput, highOutput); value : input value lowInput : lower bound of the input scale highInput : upper bound of the input scale lowOutput : lower bound of the output scale highOutput : upper bound of the output scale Example value = map(value, 0, 10, 0, 100); //Convert 'value' from a scale of 0-10 to a //scale of 0-100 and overwrite the old value of 'value' with the new one abs() Description Calculates and returns the absolute value of a number. Syntax x = abs(y) y : input value Example x = abs(-5); //take the absolute value of -5 and save it into x; x = 5 constrain() Description Constrains, or restricts, the input value to a certain range. Syntax x = constrain(x, low, high) x : the input low : the lower bound high : the upper bound Examples x = constrain(14, 0, 10); //x = 10; y = constraint(54, 20, 100); //y = 54; the 54 is within the constrained range Trigonometric Functions cos() Description Calculates and returns the cosine of an angle. The function takes angles measured in radians, not degrees. Syntax x = cos(rad); rad is the angle in radians. It accepts floating point numbers Examples x = cos(0.523599); //x = 0.866 sin() Description Calculates and returns the sine of an angle. The function takes angles measured in radians, not degrees. Syntax x = sin(rad); rad is the angle in radians. It accepts floating point numbers Examples x = sin(0.523599); //x = 0.5 tan() Description Calculates and returns the tangent of an angle. The function takes angles measured in radians, not degrees. Syntax x = tan(rad); rad is the angle in radians. It accepts floating point numbers Examples x = tan(0.523599); //x = 0.57735027","title":"Math"},{"location":"Math/math/#math","text":"Mathematical operations can be performed within your code. In addition to basic operations, there are a few shorthand ways to do simple math. Look below to see some examples.","title":"Math"},{"location":"Math/math/#addition","text":"Denoted by the + sign. x = 5 + 6; //x = 11 x = x + 1; //Increment x by 1; Add 1 to x and overwrite the old value of x with the new one x++; //Increment x by 1; shorthand version of the line above x += 3; //Add 3 to x; compound addition","title":"Addition"},{"location":"Math/math/#subtraction","text":"Denoted by the - sign. x = 7 - 2; //x = 5 x = x - 1; //Decrement x by 1; Add 1 to x and overwrite the old value of x with the new one x--; //Decrement x by 1; shorthand version of the line above x -= 3; //Subtract 3 from x; compound subtraction","title":"Subtraction"},{"location":"Math/math/#multiplication","text":"Denoted by the * . x = 3 * 2; //x = 6 x = x * 3; //Multiply x by 3 and overwrite the old value of x with the new one x *= 5; //Multiply x by 5; compound multiplication","title":"Multiplication"},{"location":"Math/math/#division","text":"Denoted by the / . x = 8 / 2; //x = 4 x = x / 3; //Divide x by 3 and overwrite the old value of x with the new one x /= 5; //Divide x by 5; compound division","title":"Division"},{"location":"Math/math/#mod","text":"The modulus - mod for short - is the remainder found when doing division. It is denoted using the % sign. x = 7 % 5; //x = 2 x = 10 % 5; //x = 0 x = 9 % 5; //x = 4","title":"Mod"},{"location":"Math/math/#math-functions","text":"","title":"Math Functions"},{"location":"Math/math/#max","text":"","title":"max()"},{"location":"Math/math/#description","text":"Calculates and returns the maximum value of two numbers","title":"Description"},{"location":"Math/math/#syntax","text":"z = max(x, y); x : first value y : second value","title":"Syntax"},{"location":"Math/math/#example","text":"x = max(5, 3); //x = 5","title":"Example"},{"location":"Math/math/#min","text":"","title":"min()"},{"location":"Math/math/#description_1","text":"Calculates and returns the minimum value of two numbers","title":"Description"},{"location":"Math/math/#syntax_1","text":"z = min(x, y); x : first value y : second value","title":"Syntax"},{"location":"Math/math/#example_1","text":"x = min(6, 4); //x = 4","title":"Example"},{"location":"Math/math/#map","text":"","title":"map()"},{"location":"Math/math/#description_2","text":"The map() function converts an input value from one scale to another scale. A common use for this function is converting from the analog input scale, 0-1023, to the analog output scale, 0-255.","title":"Description"},{"location":"Math/math/#syntax_2","text":"x = map(value, lowInput, highInput, lowOutput, highOutput); value : input value lowInput : lower bound of the input scale highInput : upper bound of the input scale lowOutput : lower bound of the output scale highOutput : upper bound of the output scale","title":"Syntax"},{"location":"Math/math/#example_2","text":"value = map(value, 0, 10, 0, 100); //Convert 'value' from a scale of 0-10 to a //scale of 0-100 and overwrite the old value of 'value' with the new one","title":"Example"},{"location":"Math/math/#abs","text":"","title":"abs()"},{"location":"Math/math/#description_3","text":"Calculates and returns the absolute value of a number.","title":"Description"},{"location":"Math/math/#syntax_3","text":"x = abs(y) y : input value","title":"Syntax"},{"location":"Math/math/#example_3","text":"x = abs(-5); //take the absolute value of -5 and save it into x; x = 5","title":"Example"},{"location":"Math/math/#constrain","text":"","title":"constrain()"},{"location":"Math/math/#description_4","text":"Constrains, or restricts, the input value to a certain range.","title":"Description"},{"location":"Math/math/#syntax_4","text":"x = constrain(x, low, high) x : the input low : the lower bound high : the upper bound","title":"Syntax"},{"location":"Math/math/#examples","text":"x = constrain(14, 0, 10); //x = 10; y = constraint(54, 20, 100); //y = 54; the 54 is within the constrained range","title":"Examples"},{"location":"Math/math/#trigonometric-functions","text":"","title":"Trigonometric Functions"},{"location":"Math/math/#cos","text":"","title":"cos()"},{"location":"Math/math/#description_5","text":"Calculates and returns the cosine of an angle. The function takes angles measured in radians, not degrees.","title":"Description"},{"location":"Math/math/#syntax_5","text":"x = cos(rad); rad is the angle in radians. It accepts floating point numbers","title":"Syntax"},{"location":"Math/math/#examples_1","text":"x = cos(0.523599); //x = 0.866","title":"Examples"},{"location":"Math/math/#sin","text":"","title":"sin()"},{"location":"Math/math/#description_6","text":"Calculates and returns the sine of an angle. The function takes angles measured in radians, not degrees.","title":"Description"},{"location":"Math/math/#syntax_6","text":"x = sin(rad); rad is the angle in radians. It accepts floating point numbers","title":"Syntax"},{"location":"Math/math/#examples_2","text":"x = sin(0.523599); //x = 0.5","title":"Examples"},{"location":"Math/math/#tan","text":"","title":"tan()"},{"location":"Math/math/#description_7","text":"Calculates and returns the tangent of an angle. The function takes angles measured in radians, not degrees.","title":"Description"},{"location":"Math/math/#syntax_7","text":"x = tan(rad); rad is the angle in radians. It accepts floating point numbers","title":"Syntax"},{"location":"Math/math/#examples_3","text":"x = tan(0.523599); //x = 0.57735027","title":"Examples"}]}